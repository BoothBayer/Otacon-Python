import math
import discord
from discord.ext import commands
import logging

#---------Logging--------
logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename='discord.log',encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)
#-----------------------

class TTT(commands.Cog):
#add, remove, decide & send, post
#model DICTIONARY: {key=uesrid values={userName, role} , ...}
	def __init__(self,bot):
		self.client = bot
	detectiveCount = 0
	traitorCount = 0
	innocentCount = 0
	traitor_pct = 0.25
	traitor_max = 5
	detective_pct = 0.13
	detective_max = 2
	detective_min_players = 5
	roleCoices = ["Innocent", "Traitor", "Detective"]
	terr = {}
#	print(f'dic:{terr}')
	@commands.command()
	async def addMe(self, ctx):
		user = ctx.message.author
		self.terr[user.id] = {'name': user.display_name, 'role': 'test'}
		await ctx.send(f'{self.terr[user.id]}\n{self.terr}')

	@addMe.error
	async def addMeError(self,ctx,error):
		await ctx.send(f'addMe: An unexpected error has occurred:\n{error}')
		logger.error(error)
		print(f'addMe: An unexpected error has occurred:\n{error}')

	@commands.command()
	async def removeMe(self,ctx):
		user = ctx.message.author
		del self.terr[user.id]

	@removeMe.error()
	async def removeMeError(self,ctx,error):
		await ctx.send(f'removeMe: An unexpected error has occurred:\n{error}')
		logger.error(error)
		print(f'removeMe: An unexpected error has occurred:\n{error}')

	@commands.command()
	async def start(self,ctx):
		if len(self.terr) < 4:
			await ctx.send("Not enough player for a game, you require a minimum of 4")
			return
		await ctx.send(f'I am distributing the roles, this may take a minute')
		self.generateRoles(len(self.terr)


	def generateRoles(totalPlayers):
		print("GENERATING ROLES")
		logger.info("GENERATING ROLES")
		#reset data
		self.traitorCount = 0
		self.innocentCount = 0
		self.detectiveCount = 0
		#CALL TRAITOR AND DETECTIVE COUNT
		self.traitorCount = self.getTraitorCount(totalPlayers)
		self.detectiveCount = self.getDetectiveCount(totalPlayers)
		x = 0
		player = -1
		while (x < self.detectiveCount):
			player++
			if (player != len(self.terr)):
				if 

	def getTraitorCount(totalPlayers):
		print("getTraitorCount")
		logger.info("Getting Amount of Traitors")
		traitorTotal = math.floor(totalPlayers * self.traitor_pct)
		if ((traitorTotal >= 1) and (traitorTotal <= self.traitor_max)):
			return traitorTotal
		else:
			return 1

	def getDetectiveCount(totalPlayers):
		print("getDetectiveCount")
		logger.info("Getting amount of Detectives")
		if (totalPlayers >= this.detective_min_players):
			detectiveTotal = math.floor(totalPlayers * self.detective_pct)
			if (detectiveTotal >= 1) and (detectiveTotal <= self.detective_max):
				return detectiveTotal
			else:
				return 0

def setup(bot):
	bot.add_cog(TTT(bot))
